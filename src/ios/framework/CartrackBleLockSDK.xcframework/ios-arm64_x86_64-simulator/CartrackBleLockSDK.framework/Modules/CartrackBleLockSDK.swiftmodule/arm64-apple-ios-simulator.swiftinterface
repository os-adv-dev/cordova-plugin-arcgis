// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CartrackBleLockSDK
@_exported import CartrackBleLockSDK
import CommonCrypto
import CoreBluetooth
import Foundation
import Security
import Swift
import UIKit
import _Concurrency
public enum BleSignalStrength {
  case unknown
  case strong
  case good
  case weak
  public static func == (a: CartrackBleLockSDK.BleSignalStrength, b: CartrackBleLockSDK.BleSignalStrength) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol BleTerminalDelegate : AnyObject {
  func bleTerminalDidSavedKey(terminal: CartrackBleLockSDK.BleTerminal, error: CartrackBleLockSDK.BleError?)
  func bleTerminalDidConnect(terminal: CartrackBleLockSDK.BleTerminal, error: CartrackBleLockSDK.BleError?)
  func bleTerminalDidAction(terminal: CartrackBleLockSDK.BleTerminal, action: CartrackBleLockSDK.BleAction, error: CartrackBleLockSDK.BleError?)
  func bleTerminalDisconnected(terminal: CartrackBleLockSDK.BleTerminal)
  func bleTerminalSignalUpdate(rssi: Swift.Int, strength: CartrackBleLockSDK.BleSignalStrength)
  func bleTerminalDidGetVehicleStats(terminal: CartrackBleLockSDK.BleTerminal, vehicleStats: CartrackBleLockSDK.VehicleStats?, error: CartrackBleLockSDK.BleError?)
}
public enum BleConnectionState {
  case disconnected
  case connecting
  case connected
  public static func == (a: CartrackBleLockSDK.BleConnectionState, b: CartrackBleLockSDK.BleConnectionState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum BleAction {
  case lock
  case unlock
  case headlight
  case horn
  case lockState
  case unlockNoKeyFob
  case ignitionState
  public static func == (a: CartrackBleLockSDK.BleAction, b: CartrackBleLockSDK.BleAction) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum LockState {
  case unknown
  case locked
  case unlocked
  public static func == (a: CartrackBleLockSDK.LockState, b: CartrackBleLockSDK.LockState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum IgnitionState {
  case unknown
  case on
  case off
  public static func == (a: CartrackBleLockSDK.IgnitionState, b: CartrackBleLockSDK.IgnitionState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class BleTerminal {
  weak public var delegate: CartrackBleLockSDK.BleTerminalDelegate?
  public var hasKey: Swift.Bool {
    get
  }
  public var authKey: Swift.String? {
    get
  }
  public var connectionState: CartrackBleLockSDK.BleConnectionState {
    get
  }
  public var signalStrength: CartrackBleLockSDK.BleSignalStrength {
    get
  }
  public var terminalID: Swift.String {
    get
  }
  public var lockState: CartrackBleLockSDK.LockState {
    get
  }
  public var ignitionState: CartrackBleLockSDK.IgnitionState {
    get
  }
  public func saveAuthKey(authKey: Swift.String)
  public func removeAuthKey()
  public func connect(timeout: Swift.Float = 10.0)
  public func disconnect()
  public func getVehicleStats()
  public func sendAction(_ action: CartrackBleLockSDK.BleAction)
  @objc deinit
}
public enum BleError : Swift.Error, Foundation.CustomNSError {
  case bluetoohUnauthorized
  case bluetoothDisabled
  case bluetoohUnsupported
  case saveAuthKeyFailed
  case keyNotFound
  case keyInvalid
  case terminalNotFound
  case notConnected
  case ctgError(Swift.Int, Swift.Int, Swift.String)
  public static var errorDomain: Swift.String
  public var actionCode: Swift.Int {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var localizedDescription: Swift.String {
    get
  }
}
public enum CtgError : Swift.Error, Foundation.CustomNSError {
  case invalidKey
  case timeout
  case fail
  case noKey
  case unsuccessful
  case scriptFail
  case noScript
  case unknownState
  public var errorCode: Swift.Int {
    get
  }
  public var localizedDescription: Swift.String {
    get
  }
  public static func == (a: CartrackBleLockSDK.CtgError, b: CartrackBleLockSDK.CtgError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class BleService {
  public static func getTerminal(terminalID: Swift.String) -> CartrackBleLockSDK.BleTerminal
  @objc deinit
}
public enum IndicatorState : Swift.Int {
  case off
  case left
  case right
  case both
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class VehicleStats {
  public var odometer: Swift.Double
  public var engineHours: Swift.Int
  public var engineRPM: Swift.Int
  public var fuelLevel: Swift.Int
  public var hazardsIsOn: Swift.Bool
  public var indicators: CartrackBleLockSDK.IndicatorState
  public var brakesIsActive: Swift.Bool
  public var handBrakeIsActive: Swift.Bool
  public var lightsIsOn: Swift.Bool
  public var driverDoorIsOpen: Swift.Bool
  public var passengerDoorIsOpen: Swift.Bool
  public var driverSeatbeltIsEngage: Swift.Bool
  public var passengerSeatbeltIsEngage: Swift.Bool
  public var hornIsActive: Swift.Bool
  @objc deinit
}
extension CartrackBleLockSDK.BleSignalStrength : Swift.Equatable {}
extension CartrackBleLockSDK.BleSignalStrength : Swift.Hashable {}
extension CartrackBleLockSDK.BleConnectionState : Swift.Equatable {}
extension CartrackBleLockSDK.BleConnectionState : Swift.Hashable {}
extension CartrackBleLockSDK.BleAction : Swift.Equatable {}
extension CartrackBleLockSDK.BleAction : Swift.Hashable {}
extension CartrackBleLockSDK.LockState : Swift.Equatable {}
extension CartrackBleLockSDK.LockState : Swift.Hashable {}
extension CartrackBleLockSDK.IgnitionState : Swift.Equatable {}
extension CartrackBleLockSDK.IgnitionState : Swift.Hashable {}
extension CartrackBleLockSDK.CtgError : Swift.Equatable {}
extension CartrackBleLockSDK.CtgError : Swift.Hashable {}
extension CartrackBleLockSDK.IndicatorState : Swift.Equatable {}
extension CartrackBleLockSDK.IndicatorState : Swift.Hashable {}
extension CartrackBleLockSDK.IndicatorState : Swift.RawRepresentable {}
